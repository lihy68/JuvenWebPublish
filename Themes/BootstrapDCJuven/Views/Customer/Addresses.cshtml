@model CustomerAddressListModel
@using Nop.Web.Models.Customer;
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Account").Text);
}
@section left
{
    @Html.Action("CustomerNavigation", "Customer", new { selectedTabId = CustomerNavigationEnum.Addresses })
}
<div class="page-header page-header-custom">
    <h3>@T("Account.MyAccount") - @T("Account.CustomerAddresses")</h3>
</div>
@if (Model.Addresses.Count > 0)
{
    using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        for (int i = 0; i < Model.Addresses.Count; i++)
        {
            var address = Model.Addresses[i];
            <div class="row">
                <div class="col-sm-6">
                    <div class="page-header marginTop0">
                        <h3 class="marginTop0">@address.FirstName @address.LastName</h3>
                    </div>
                </div>    
            </div>
            <ul class="list-unstyled marginBottom40">
                <li>
                    <label>@address.FirstName @address.LastName</label>
                </li>
                <li>
                    @Html.LabelFor(model => model.Addresses[i].Email, new { }, ":")
                    @address.Email
                </li>
                @if (address.PhoneEnabled)
                {
                    <li>
                        @Html.LabelFor(model => model.Addresses[i].PhoneNumber, new { }, ":")
                        @address.PhoneNumber
                    </li>
                }
                @if (address.FaxEnabled)
                {
                    <li>
                        @Html.LabelFor(model => model.Addresses[i].FaxNumber, new { }, ":")
                        @address.FaxNumber
                    </li>
                }
                @if (address.CompanyEnabled && !String.IsNullOrEmpty(address.Company))
                {
                    <li>@address.Company</li>
                }
                @if (address.StreetAddressEnabled)
                {
                    <li class="address1">
                        @address.Address1
                    </li>
                }
                @if (address.StreetAddress2Enabled && !String.IsNullOrEmpty(address.Address2))
                {
                    <li class="address2">
                        @address.Address2
                    </li>
                }
                @if (address.CityEnabled || address.StateProvinceEnabled || address.ZipPostalCodeEnabled)
                {
                    var cityStateZip = "";
                    if (address.CityEnabled)
                    {
                        cityStateZip = address.City;
                        if (address.StateProvinceEnabled || address.ZipPostalCodeEnabled)
                        {
                            cityStateZip += ",";
                        }
                    }
                    if (address.StateProvinceEnabled)
                    {
                        if (!String.IsNullOrEmpty(cityStateZip))
                        {
                            cityStateZip += " ";
                        }
                        cityStateZip += address.StateProvinceName;
                    }
                    if (address.ZipPostalCodeEnabled)
                    {
                        if (!String.IsNullOrEmpty(cityStateZip))
                        {
                            cityStateZip += " ";
                        }
                        cityStateZip += address.ZipPostalCode;
                    }

                    <li class="city-state-zip">
                        @cityStateZip
                    </li>
                }
                @if (address.CountryEnabled && !String.IsNullOrEmpty(address.CountryName))
                {
                    <li class="country">
                        @address.CountryName
                    </li>
                }
                @if (!String.IsNullOrEmpty(address.FormattedCustomAddressAttributes))
                {
                    <li class="custom-attributes-view">
                        @Html.Raw(address.FormattedCustomAddressAttributes)
                    </li>
                }
            </ul>
            <div class="buttons">
                <input type="button" class="btn btn-primary" onclick="location.href = '@(Url.RouteUrl("CustomerAddressEdit", new {addressId = address.Id}))'" value="@T("Common.Edit")" />
                <input type="button" class="btn btn-default" onclick="deletecustomeraddress(@(address.Id))" value="@T("Common.Delete")" />
            </div>
            <script type="text/javascript">
                    function deletecustomeraddress(addressId) {
                        if (confirm('@T("Admin.Common.AreYouSure")')) {
                            var postData = {
                                addressId: addressId
                            };
                            addAntiForgeryToken(postData);

                            $.ajax({
                                cache: false,
                                type: 'POST',
                                url: '@Url.Action("AddressDelete", "Customer")',
                                data: postData,
                                dataType: 'json',
                                success: function(data) {
                                    location.href = data.redirect;
                                },
                                error: function(xhr, ajaxOptions, thrownError) {
                                    alert('Failed to delete');
                                }
                            });
                        }
                    }
            </script>
        }
    }

}
else
{
    <div class="no-data">
        @T("Account.CustomerAddresses.NoAddresses")
    </div>
}
<div class="row col-sm-12 text-center">
    <input type="button" class=" btn btn-primary" onclick="location.href='@Url.RouteUrl("CustomerAddressAdd")'" value="@T("Common.AddNew")" />
</div>
